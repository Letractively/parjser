#summary This page describes the format of parjser grammars.

= Introduction =

The parjser project does not provide parsers for a particular grammar: rather, it offers generic parsers which can parse text according to a specific grammar. The grammar is passed to the parser's constructor, and the parser can then use the grammar to discover a structure in the input text according to the syntax rules defined in the grammar.

= Grammar Objects =
Parjser grammars are JavaScript objects. The parjser project currently does not supply a constructor for grammar objects. Instead, they can be created as a JavaScript object literal. 

The general form of a parjser grammar object literal is shown below:
{{{
{
  tokens:  {
 
      ...terminal rules...
     
  },
  ignoreTokens: {
  
      ...ignorable terminal rules...

  },
  rules:  {

      ...non-terminal rules...

  },
  startSymbol: "symbol"
}
}}} 

The structure shown above represents an ordinary JavaScript object literal with the members `tokens`, `ignoreTokens`, `rules`, and `startSymbol`. 

==Symbols==
The members of the `tokens` and `rules` members each represent a collection of rules, defining the grammar's terminal and non-terminal symbols respectively. In both cases, the member name is the symbol name that appears at the left-hand side of the rule, and the member value represents the rule's right hand side. Details concerning the definition of right-hand side of the rules is explained in detail in the sections dedicated to the `tokens` and `rules` objects. 

For now, it is good to mention that the collection of member names from the `tokens` and `rules` objects must be disjoint - in other words, a name used for a terminal symbol cannot also be used as the name for a non-terminal symbol (and vice versa). 

Another thing to keep in mind symbols is that there are little restrictions with regard to symbol names, as you can use JavaScript regular identifiers as well as strings. However, symbol names must not be equal to one of the strings used to denote an occurrence indicator (which are the strings `"?"`, `"+"`, and `"*"`, and any string matching the regular expression `/\{\d+(,\d+)?\}/`), nor to the string used to denote a choice (which is the pipe `"|"`). Occurrence indicators are explained in detail in the section about sequences, and choices are discussed in their own section.

==Tokens==
The `tokens` member is itself an object that defines the terminal symbols used by the grammar. Each distinct member of the `tokens` member represents a rule defining a terminal symbol. 

The member name is the rule's left-hand side, and can be used as symbol in the rules for the non-terminal symbols. (This is explained in further detail in the next section about the `rules` object.) The member value is the rule's right-hand side, and must be a [http://www.w3schools.com/jsref/jsref_obj_regexp.asp JavaScript regular expression] that matches any string considered valid for that terminal symbol. 

By way of example, a grammar that can handle basic arithmetic may have the following `tokens`: 
{{{
  tokens: {
    number: /\d*\.?\d+([eE][\-+]?\d+)?/,
    addsub_operator: /[\+\-]/,
    muldiv_operator: /[\*\/]/,
    exp_operator: /\^/,
    lparen: /\(/,
    rparen: /\)/
  }
}}} 
==Rules==

The `rules` member is itself an object that defines the non-terminal symbols used by the grammar. Each distinct member of the `rules` member represents a rule defining a non-terminal symbol. 

As is the case with the `tokens` object, the member name is the rule's left-hand side. The value of the member represents the right-hand side of the rule, and can be either a JavaScript string literal or an array.

A JavaScript string literal appearing as the value of a member of the `rules` object indicates a (terminal or non-terminal) symbol. Either the `tokens` or the `rules` object must have a member with a name equal to the string's value. In other words, any symbol used in the right-hand side of the members of the `rules` object must be defined as either a terminal or a non-terminal symbol.

If an array is used as value for a member of the `rules` object, it can either denote a sequence or a choice.

==Sequence==
A sequence indicates the consecutive occurrence of its elements. In parjser grammar objects, a sequence is denoted as an array. Array elements can either be JavaScript string literals or JavaScript arrays. 

If a JavaScript string literal is used as element of a sequence array, it can indicate either a (terminal or non-terminal) symbol, or an occurrence indicator.

===Occurrence Indicators===
Occurrence indicators are a collection of reserved strings shown below:
  * `"?"` indicates optional occurrence: the array element immediately preceding the occurrence indicator may be present, but may also be omitted.
  * `"+"` indicates indefinitely repeatable occurrence: the array element immediately preceding the occurrence indicator must be present at least once, and may optionally occur anny number of times beyond the initial occurrence
  * `"*"` indicates optional and indefinitely repeatable occurrence: the array element immediately preceding the occurrence indicator may be present any number of times or be omitted alltogether.
  * A string matching the regular expression `/\{\d+(,\d+)\}/` indicates an exact indication of occurrence. In English, this regular expression reads: a left curly brace, immediately followed by a positive integer (defined as a sequence the of one or more digits), optionally followed by a comma and another positive integer, immediately followed by a right curly brace. The first integer indicates the minimum number of occurrences of the previous array element. The second integer (if present) indicates the maximum number of occurrences. For example, the occurrence indicator `"?"` could also be written as `"{0,1}"`
Sequences also support occurrence indicators. These are denoted using 